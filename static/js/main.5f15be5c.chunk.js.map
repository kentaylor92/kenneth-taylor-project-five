{"version":3,"sources":["firebase.js","components/DisplayBooks.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","displayBooks","book","className","href","volumeInfo","infoLink","target","rel","src","undefined","imageLinks","thumbnail","alt","title","authors","Footer","Component","App","handleChange","e","setState","userInput","value","handleFormSubmit","preventDefault","axios","url","method","responseType","params","key","q","state","startIndex","maxResults","then","response","console","log","data","items","books","scrollToMyRef","myRef","window","scrollTo","current","offsetTop","React","createRef","bookshelf","catch","error","action","onSubmit","this","htmlFor","type","id","onChange","placeholder","ref","map","index","DisplayBooks","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"sUAYAA,IAASC,cAVc,CACnBC,OAAQ,0CACRC,WAAY,8CACZC,YAAa,qDACbC,UAAW,8BACXC,cAAe,0CACfC,kBAAmB,eACnBC,MAAO,8CAKIR,EAAf,ECSeS,MArBf,YAAgC,IAARC,EAAO,EAAPA,KAChB,OACI,yBAAKC,UAAU,QACX,uBAAGC,KAAMF,EAAKG,WAAWC,SAAUC,OAAO,SAASC,IAAI,uBACnD,yBAAKC,SAC8BC,IAA/BR,EAAKG,WAAWM,WACd,iCACAT,EAAKG,WAAWM,WAAWC,UAAWC,IAAKX,EAAKG,WAAWS,SAErE,4BAAKZ,EAAKG,WAAWS,OACrB,gCAC4BJ,IAA5BR,EAAKG,WAAWU,QACd,GACAb,EAAKG,WAAWU,QAAQ,IAC1B,yBAAKZ,UAAU,kBACX,uDCLLa,E,iLARP,OACI,yBAAKb,UAAU,UACX,0H,GAJKc,aCiINC,E,YAzHb,aAAe,IAAD,8BACZ,+CAsCFC,aAAe,SAACC,GACd,EAAKC,SAAS,CACZC,UAAWF,EAAEb,OAAOgB,SAzCV,EA+CdC,iBAAmB,SAACJ,GAClBA,EAAEK,iBAKFC,IAAM,CACJC,IAAK,8CACLC,OAAQ,MACRC,aAAc,OACdC,OAAQ,CACNC,IAPW,0CAQXC,EAAG,EAAKC,MAAMX,UACdY,WAAY,EACZC,WAAY,MAGbC,MAAK,SAACC,GACPC,QAAQC,IAAIF,EAASG,KAAKC,OAE1B,EAAKpB,SAAS,CACZqB,MAAOL,EAASG,KAAKC,WAIzB,EAAKpB,SAAS,CACZC,UAAW,KAGb,EAAKqB,cAAc,EAAKC,QA5EZ,EAkFdD,cAAgB,kBAAME,OAAOC,SAAS,EAAG,EAAKF,MAAMG,QAAQC,YA/E1D,EAAKJ,MAAQK,IAAMC,YAEnB,EAAKjB,MAAQ,CACXS,MAAO,GACPpB,UAAW,GACX6B,UAAW,IARD,E,iFAaO,IAAD,OAIlBzB,IAAM,CACJC,IAAK,8CACLC,OAAQ,MACRC,aAAc,OACdC,OAAQ,CACNC,IAPW,0CAQXC,EAAG,QACHE,WAAY,EACZC,WAAY,MAEbC,MAAK,SAACC,GAEP,EAAKhB,SAAS,CACZqB,MAAOL,EAASG,KAAKC,WAEtBW,OAAM,SAACC,S,+BAsDV,OACE,yBAAKlD,UAAU,OAEb,4BAAQA,UAAU,cACd,+CACF,yBAAKA,UAAU,WACb,0BAAMmD,OAAO,SAASC,SAAUC,KAAKhC,kBACnC,2BAAOiC,QAAQ,cAAf,4CACA,2BACEC,KAAK,OACLC,GAAG,aACHC,SAAUJ,KAAKrC,aACfI,MAAOiC,KAAKvB,MAAMX,UAClBuC,YAAY,6CAEd,4BAAQH,KAAK,SAASI,IAAKN,KAAKZ,OAAhC,uBAMN,6BAASzC,UAAU,kBAAkB2D,IAAKN,KAAKZ,OAC5CY,KAAKvB,MAAMS,MAAMqB,KAAI,SAAC7D,EAAM8D,GAC3B,OACE,kBAACC,EAAD,CAAclC,IAAKiC,EAAO9D,KAAMA,QAKtC,kBAAC,EAAD,W,GApHUe,aCGEiD,QACW,cAA7BrB,OAAOsB,SAASC,UAEe,UAA7BvB,OAAOsB,SAASC,UAEhBvB,OAAOsB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxC,MAAK,SAAAyC,GACJA,EAAaC,gBAEd1B,OAAM,SAAAC,GACLf,QAAQe,MAAMA,EAAM0B,c","file":"static/js/main.5f15be5c.chunk.js","sourcesContent":["import firebase from 'firebase';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBo7XjqmSIw1ycVlFHRA-QVQxnUPJf4bA0\",\n    authDomain: \"kenneth-taylor-project-five.firebaseapp.com\",\n    databaseURL: \"https://kenneth-taylor-project-five.firebaseio.com\",\n    projectId: \"kenneth-taylor-project-five\",\n    storageBucket: \"kenneth-taylor-project-five.appspot.com\",\n    messagingSenderId: \"843337778614\",\n    appId: \"1:843337778614:web:649c43dfcf9394c1ef6d17\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React from 'react';\n\nfunction displayBooks ({book}) {  \n        return (\n            <div className='book'>    \n                <a href={book.volumeInfo.infoLink} target='_blank' rel=\"noopener noreferrer\">\n                    <img src={\n                        book.volumeInfo.imageLinks === undefined\n                        ? 'http://i.imgur.com/sJ3CT4V.gif'\n                        : book.volumeInfo.imageLinks.thumbnail} alt={book.volumeInfo.title} />\n                </a>\n                <h2>{book.volumeInfo.title}</h2>\n                <p>{\n                book.volumeInfo.authors === undefined\n                ? ''\n                : book.volumeInfo.authors[0]}</p>\n                <div className=\"addToBookshelf\">\n                    <button>Add to Bookshelf</button>       \n                </div>\n            </div>\n        )\n}\n\nexport default displayBooks;","import React, { Component } from 'react';\n\nclass Footer extends Component {\n    render() {\n        return (\n            <div className='footer'>\n                <p>This app was created by Ken Taylor using React, Google Books API, and Google Firebase.</p>\n            </div>\n        )\n    }\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport firebase from './firebase';\nimport './index.css';\n// import Header from './components/Header';\nimport DisplayBooks from './components/DisplayBooks';\nimport Footer from './components/Footer';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.myRef = React.createRef();\n\n    this.state = {\n      books: [],\n      userInput: '',\n      bookshelf: [],\n    }\n  }\n\n  // Component Did Mount\n  componentDidMount() {   \n    // Initial API Call for PageLoad\n    const apiKey = 'AIzaSyBN0p9j4hgZ700Jnyt2zz9QwMx9BIdcjW4';\n\n    axios({\n      url: 'https://www.googleapis.com/books/v1/volumes',\n      method: 'GET',\n      responseType: 'json',\n      params: {\n        key: apiKey,\n        q: 'react',\n        startIndex: 0,\n        maxResults: 16,\n      }\n    }).then((response) => {\n      // console.log(response.data.items);\n      this.setState({\n        books: response.data.items,\n      })\n    }).catch((error) => {\n      // console.log(error);\n    })\n  }\n\n\n  // Handle Change Function\n  handleChange = (e) => {\n    this.setState({\n      userInput: e.target.value,  \n    })\n  }\n\n  \n  // Form Submit Function\n  handleFormSubmit = (e) => {\n    e.preventDefault();\n    // console.log('The following text was submitted!', + this.state.value);\n\n    const apiKey = 'AIzaSyBN0p9j4hgZ700Jnyt2zz9QwMx9BIdcjW4';\n\n    axios({\n      url: 'https://www.googleapis.com/books/v1/volumes',\n      method: 'GET',\n      responseType: 'json',\n      params: {\n        key: apiKey,\n        q: this.state.userInput,\n        startIndex: 0,\n        maxResults: 32,\n        \n      }\n    }).then((response) => {\n      console.log(response.data.items);\n\n      this.setState({\n        books: response.data.items,\n      })\n    })\n\n    this.setState({\n      userInput: '',\n    })\n\n    this.scrollToMyRef(this.myRef);\n\n    \n  }\n\n  // Scroll Function\n  scrollToMyRef = () => window.scrollTo(0, this.myRef.current.offsetTop);\n\n  \n  render() {\n    return (\n      <div className=\"App\">\n        {/* <Header /> */}\n        <header className=\"App-header\">\n            <h1>Book Search App</h1>\n          <div className=\"wrapper\">\n            <form action=\"submit\" onSubmit={this.handleFormSubmit}>\n              <label htmlFor='bookSearch'>Search by book name, author, or subject.</label>\n              <input\n                type='text'\n                id='bookSearch'\n                onChange={this.handleChange}\n                value={this.state.userInput}\n                placeholder='Search by book name, author, or subject.'\n              />\n              <button type='submit' ref={this.myRef}>Search for books</button>\n              \n            </form>\n          </div>\n        </header>\n        {/* Results Section */}\n        <section className=\"results wrapper\" ref={this.myRef}>\n          {this.state.books.map((book, index) => {\n            return (\n              <DisplayBooks key={index} book={book}  />\n            )\n          })}\n        </section>\n        {/* Footer section */}\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}