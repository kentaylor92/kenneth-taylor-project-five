{"version":3,"sources":["firebase.js","components/DisplayBooks.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","displayBooks","book","shelf","console","log","bookImg","className","href","linkToBuy","target","rel","src","undefined","alt","title","author","onClick","Footer","Component","App","removeBook","database","ref","child","remove","handleChange","e","setState","userInput","value","handleFormSubmit","preventDefault","axios","url","method","responseType","params","key","q","state","startIndex","maxResults","then","response","newState","data","items","map","push","volumeInfo","id","imageLinks","thumbnail","authors","infoLink","books","scrollToMyRef","myRef","window","scrollTo","current","offsetTop","React","createRef","bookshelf","bookSelect","bookId","updatedBookshelf","catch","error","on","val","bookData","name","action","onSubmit","this","htmlFor","type","onChange","placeholder","DisplayBooks","addToBookshelf","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.b3b0a292.chunk.js","sourcesContent":["import firebase from 'firebase';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBo7XjqmSIw1ycVlFHRA-QVQxnUPJf4bA0\",\n    authDomain: \"kenneth-taylor-project-five.firebaseapp.com\",\n    databaseURL: \"https://kenneth-taylor-project-five.firebaseio.com\",\n    projectId: \"kenneth-taylor-project-five\",\n    storageBucket: \"kenneth-taylor-project-five.appspot.com\",\n    messagingSenderId: \"843337778614\",\n    appId: \"1:843337778614:web:649c43dfcf9394c1ef6d17\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React from 'react';\n\n\n\n\nfunction displayBooks ({book, shelf}) {  \n    \n    \n            console.log(book.bookImg);\n        return (\n            <div className='book'>    \n                 <a href={book.linkToBuy} target='_blank' rel=\"noopener noreferrer\"> \n                    <img src={\n                        book.bookImg === undefined\n                        ? 'http://i.imgur.com/sJ3CT4V.gif'\n                        : book.bookImg} alt={book.title} /> \n                </a> \n                <h2>{book.title}</h2>\n                <p>{\n                book.author === undefined\n                ? ''\n                : book.author[0]}</p>\n                <div className=\"addToBookshelf\">\n                    {/* <button onClick={ (e) => console.log('IT WORKED!')}>Add to Bookshelf</button>        */}\n                    {/* <button onClick={shelf}>Add to Bookshelf</button> */}\n                    <button onClick={() => shelf(book)}>Add To Bookshelf</button>       \n                </div>\n            </div>\n        )\n}\n\nexport default displayBooks;","import React, { Component } from 'react';\n\nclass Footer extends Component {\n    render() {\n        return (\n            <div className='footer'>\n                <p>This app was created by Ken Taylor using React, Google Books API, and Google Firebase.</p>\n            </div>\n        )\n    }\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport firebase from './firebase';\nimport './index.css';\nimport DisplayBooks from './components/DisplayBooks';\nimport Footer from './components/Footer';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.myRef = React.createRef();\n\n    this.state = {\n      books: [],\n      userInput: '',\n      bookshelf: [],\n      bookSelect: '',\n      bookId: '',\n      updatedBookshelf: []\n    }\n  }\n\n  // Component Did Mount\n  componentDidMount() {   \n    const apiKey = 'AIzaSyBN0p9j4hgZ700Jnyt2zz9QwMx9BIdcjW4';\n    // Results to be displayed on page load!\n    axios({\n      url: 'https://www.googleapis.com/books/v1/volumes',\n      method: 'GET',\n      responseType: 'json',\n      params: {\n        key: apiKey,\n        q: 'react',\n        startIndex: 0,\n        maxResults: 16,\n      }\n    }).then((response) => {\n      // this.setState({\n      //   books: response.data.items,\n\n      const newState = []\n      response.data.items.map(function (book) {\n        // const uniqueId = book.id;\n        // console.log(book.id);\n        newState.push({\n          title: book.volumeInfo.title,\n          key: book.id,\n          bookImg: book.volumeInfo.imageLinks.thumbnail,\n          author: book.volumeInfo.authors,\n          linkToBuy: book.volumeInfo.infoLink,\n        })\n      })\n\n      this.setState({\n        books: newState\n      })\n        \n      \n    }).catch((error) => {\n      // console.log(error);\n    })\n\n    // Bookshelf firebase log\n    const dbRef = firebase.database().ref();\n\n    dbRef.on('value', (response) => {\n\n      const updatedBookshelf = [];\n      const data = response.val();\n      // console.log(data)\n      \n      // for (let key in data) {\n      //   updatedBookshelf.push({\n      //     ...data[key]\n      //   })\n      //   // console.log(updatedBookshelf);\n\n      //   // updatedBookshelf.push(data[key]);\n      // }\n\n      for (let key in data) {\n        const bookData = {\n          key: key,\n          name: data[key],\n        }\n        updatedBookshelf.push(bookData);\n      }\n\n\n\n      this.setState({\n        updatedBookshelf: updatedBookshelf,\n        \n      });\n\n    });\n  }\n\n  // Add to BookShelf\n  addToBookshelf (book) {\n    // e.preventDefault();\n    // console.log('YOU MADE IT!!');\n    // console.log(book)\n    // console.log(book.key)\n    \n    const dbRef = firebase.database().ref();\n    // this.setState({ bookSelect: e.target.value })\n    dbRef.push(book);\n  }\n\n  removeBook = (book) => {\n\n    const dbRef = firebase.database().ref();\n    dbRef.child(book).remove();\n    // console.log(book);\n  }\n\n\n\n  // Handle Change Function for Text Input\n  handleChange = (e) => {\n    this.setState({\n      userInput: e.target.value,\n    })\n  }\n\n  // Form Submit Function\n  handleFormSubmit = (e) => {\n    e.preventDefault();\n    // console.log('The following text was submitted!', + this.state.value);\n\n    const apiKey = 'AIzaSyBN0p9j4hgZ700Jnyt2zz9QwMx9BIdcjW4';\n\n    axios({\n      url: 'https://www.googleapis.com/books/v1/volumes',\n      method: 'GET',\n      responseType: 'json',\n      params: {\n        key: apiKey,\n        q: this.state.userInput,\n        startIndex: 0,\n        maxResults: 32,\n        \n      }\n    }).then((response) => {\n      // console.log(response.data.items);\n\n       const newState = []\n       response.data.items.map(function(book) {\n        // const uniqueId = book.id;\n        // console.log(book.id);\n        newState.push({\n          title: book.volumeInfo.title,\n          key: book.id,\n          bookImg: book.volumeInfo.imageLinks === undefined ? 'http://i.imgur.com/sJ3CT4V.gif' : book.volumeInfo.imageLinks.thumbnail,\n          author: book.volumeInfo.authors,\n          linkToBuy: book.volumeInfo.infoLink,\n        })\n      })\n\n      this.setState({\n        books: newState,\n      })\n\n    })\n\n    this.setState({\n      userInput: '',\n    })\n\n    this.scrollToMyRef(this.myRef);\n    \n  }\n\n  // Scroll Function\n  scrollToMyRef = () => window.scrollTo(0, this.myRef.current.offsetTop);\n\n\n\n  \n\n\n  \n  render() {\n    return (\n      <div className=\"App\">\n        {/* <Header /> */}\n        <header className=\"App-header\">\n            <h1>Book Search App</h1>\n          <div className=\"wrapper\">\n\n            <form action=\"submit\" onSubmit={this.handleFormSubmit}>\n              <label htmlFor='bookSearch'>Search by book name, author, or subject.</label>\n              <input\n                type='text'\n                id='bookSearch'\n                onChange={this.handleChange}\n                value={this.state.userInput}\n                placeholder='Search by book name, author, or subject.'\n              />\n              <button type='submit' ref={this.myRef}>Search for books</button>\n              \n            </form>\n          </div>\n        </header>\n\n        {/* Results Section */}\n        <section className=\"results wrapper\" ref={this.myRef}>\n          {this.state.books.map((book) => {\n            console.log(book)\n            return (\n              <DisplayBooks shelf={this.addToBookshelf} key={book.id} book={book}  />\n            )\n          })}\n        </section>\n\n        <section>\n            <h2 className=\"bookshelfHeading\">Bookshelf</h2>\n          <div className=\"bookshelf wrapper\">\n            {this.state.updatedBookshelf.map((book) => {\n              console.log(book)\n              return (\n              <div key={book.key}>\n                  <a href={book.name.linkToBuy} target='_blank' rel=\"noopener noreferrer\">\n                    <img src={\n                      book.name.bookImg === undefined\n                        ? 'http://i.imgur.com/sJ3CT4V.gif'\n                        : book.name.bookImg} alt={book.name.title} />\n                  </a> \n                  <h3>{book.name.title}</h3>\n                  <p>{book.name.author}</p>\n                  <button onClick={ () => {this.removeBook(book.key) }}>Remove from shelf</button>  \n              </div>\n              \n              )\n            })}\n          </div>\n        </section>\n\n        {/* Footer section */}\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}